<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Shapes_8cpp" kind="file" language="C++">
    <compoundname>Shapes.cpp</compoundname>
    <includes refid="Shapes_8hpp" local="yes">./Shapes.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <incdepgraph>
      <node id="18">
        <label>iterator</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="5">
        <label>GL/glew.h</label>
      </node>
      <node id="2">
        <label>./Shapes.hpp</label>
        <link refid="Shapes_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>fstream</label>
      </node>
      <node id="7">
        <label>./Shader.hpp</label>
        <link refid="Shader_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>glm/gtc/type_ptr.hpp</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
      <node id="6">
        <label>../Shaders/RotationPaintShader.hpp</label>
        <link refid="RotationPaintShader_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/KronUIGL/Geometry/Shapes.cpp</label>
        <link refid="Shapes_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>../../Bases/ReflectiveItem.hpp</label>
        <link refid="ReflectiveItem_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>glm/gtc/matrix_transform.hpp</label>
      </node>
      <node id="4">
        <label>./Drawing.hpp</label>
        <link refid="Drawing_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>./../Paints/Paints.hpp</label>
        <link refid="Paints_8hpp"/>
      </node>
      <node id="3">
        <label>glm/glm.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Shapes_8hpp" kindref="compound">./Shapes.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classPoint_1ad92f2337b839a94ce97dcdb439b4325a" kindref="member">Point::Point</ref>(glm::vec3<sp/>position)<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(),<sp/>_position(position){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/><ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><ref refid="classPoint_1ad92f2337b839a94ce97dcdb439b4325a" kindref="member">Point::Point</ref>()<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/><ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="classPoint_1ad92f2337b839a94ce97dcdb439b4325a" kindref="member">Point::Point</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classPoint" kindref="compound">Point</ref>&amp;<sp/>p)<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(),<sp/>_position(p._position){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/><ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classPoint_1a63977324f06d762ce224554ae693e6c7" kindref="member">Point::generateVertices</ref>(){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[0]<sp/>=<sp/>_position.x;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[1]<sp/>=<sp/>_position.y;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[2]<sp/>=<sp/>_position.z;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="classLine_1a87e8ec896581b0e6b8c80d8dc4050da9" kindref="member">Line::Line</ref>(<ref refid="classPoint" kindref="compound">Point</ref><sp/>begin,<sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>end,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thickness)<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(),<sp/>_begin(begin),<sp/>_end(end),<sp/>_thickness(thickness){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(2*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>2*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classLine_1a5841e69c7633a8b94f155761c30c8657" kindref="member">Line::generateVertices</ref>(){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>begin_vert<sp/>=<sp/>_begin.<ref refid="classPoint_1a63977324f06d762ce224554ae693e6c7" kindref="member">generateVertices</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>end_vert<sp/>=<sp/>_end.<ref refid="classPoint_1a63977324f06d762ce224554ae693e6c7" kindref="member">generateVertices</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[i]<sp/>=<sp/>begin_vert[i];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>+i]<sp/>=<sp/>end_vert[i];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="classTriangle_1aaefe4ed500c07918d30c6f0e286332c5" kindref="member">Triangle::Triangle</ref>(<ref refid="classPoint" kindref="compound">Point</ref><sp/>points[3])<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amnt<sp/>vert&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++){<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;for<sp/>point&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_points[i]<sp/>=<sp/><ref refid="classPoint" kindref="compound">Point</ref>(points[i].getVector());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classTriangle_1aaefe4ed500c07918d30c6f0e286332c5" kindref="member">Triangle::Triangle</ref>()<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Tri<sp/>constr&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classTriangle_1aaefe4ed500c07918d30c6f0e286332c5" kindref="member">Triangle::Triangle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classTriangle" kindref="compound">Triangle</ref>&amp;<sp/>t)<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Tri<sp/>copy&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_points[i]<sp/>=<sp/>t._points[i];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classTriangle_1a10ad7915f83b13cfebddea20e6336894" kindref="member">Triangle::generateVertices</ref>(){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>verts<sp/>=<sp/>_points[i].<ref refid="classPoint_1a63977324f06d762ce224554ae693e6c7" kindref="member">generateVertices</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;<sp/>j++)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[i+j]<sp/>=<sp/>verts[j];</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="classRectangle_1a8a933e0ebd9e80ce91e61ffe87fd577e" kindref="member">Rectangle::Rectangle</ref>(<ref refid="classPoint" kindref="compound">Point</ref><sp/>points[4])<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>2*3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_points[i]<sp/>=<sp/>points[i];</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="classRectangle_1a8a933e0ebd9e80ce91e61ffe87fd577e" kindref="member">Rectangle::Rectangle</ref>()<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>2*3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="classRectangle_1a8a933e0ebd9e80ce91e61ffe87fd577e" kindref="member">Rectangle::Rectangle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classRectangle" kindref="compound">Rectangle</ref>&amp;<sp/>t)<sp/>:<sp/><ref refid="classshapeElement" kindref="compound">shapeElement</ref>(){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>2*3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_points[i]<sp/>=<sp/>t._points[i];</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classRectangle_1a04bc59d135e90047dbb780fb52788e02" kindref="member">Rectangle::generateVertices</ref>(){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>triangleVerts;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>ptArr[3]<sp/>=<sp/>{<ref refid="classPoint" kindref="compound">Point</ref>(_points[0].getVector()),<ref refid="classPoint" kindref="compound">Point</ref>(_points[1].getVector()),<ref refid="classPoint" kindref="compound">Point</ref>(_points[2].getVector())};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTriangle" kindref="compound">Triangle</ref><sp/>t<sp/>=<sp/><ref refid="classTriangle" kindref="compound">Triangle</ref>(ptArr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ptArr<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/><ref refid="classTriangle" kindref="compound">Triangle</ref>(ptArr);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tri<sp/>done&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triangleVerts<sp/>=<sp/>t.<ref refid="classTriangle_1a10ad7915f83b13cfebddea20e6336894" kindref="member">generateVertices</ref>();<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//generate<sp/>the<sp/>vertices<sp/>for<sp/>the<sp/>2<sp/>triangles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>(3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>);<sp/>j++){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>[i*(3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>)+j]<sp/>=<sp/>triangleVerts[j];<sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>them<sp/>to<sp/>the<sp/>rectangle&apos;s<sp/>verticies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;out&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="classEmptyRectangle_1a6f0aded2866e07ad17aa3f4fd58dc6e7" kindref="member">EmptyRectangle::EmptyRectangle</ref>(<ref refid="classPoint" kindref="compound">Point</ref><sp/>points[4],<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thickness)<sp/>:<sp/><ref refid="classDrawable" kindref="compound">Drawable</ref>(),_thickness(thickness){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="Drawing_8hpp_1ac9e546db27bb4f76f47d7e25f24abb88a7ca66fdfaad3eb33fc65d7490178f856" kindref="member">RenderMode::Triangles</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>4*2*3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//4<sp/>rectangles,<sp/>*<sp/>2<sp/>triangles<sp/>*<sp/>3<sp/>points<sp/>*<sp/>Verticies<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_points[i]<sp/>=<sp/>points[i];<sp/></highlight><highlight class="comment">//setup<sp/>the<sp/>4<sp/>corner<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>width/height<sp/>of<sp/>the<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>std::abs(_points[0].getVector().x<sp/>-_points[1].getVector().x);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height<sp/>=<sp/>std::abs(_points[1].getVector().y<sp/>-_points[2].getVector().y);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="classEmptyRectangle_1a6f0aded2866e07ad17aa3f4fd58dc6e7" kindref="member">EmptyRectangle::EmptyRectangle</ref>(glm::vec3<sp/>origin,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>thickness)<sp/>:<sp/><ref refid="classDrawable" kindref="compound">Drawable</ref>(),<sp/>_width(width),<sp/>_height(height),<sp/>_thickness(thickness){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>mode<sp/>=<sp/><ref refid="Drawing_8hpp_1ac9e546db27bb4f76f47d7e25f24abb88a7ca66fdfaad3eb33fc65d7490178f856" kindref="member">RenderMode::Triangles</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.clear();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>verticesAmount<sp/>=<sp/>4*2*3*<ref refid="Drawing_8hpp_1a1b332b1d1277bcf787fe5d740b7a45d7" kindref="member">VERTICES_SIZE</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//4<sp/>rectangles,<sp/>*<sp/>2<sp/>triangles<sp/>*<sp/>3<sp/>points<sp/>*<sp/>Verticies<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>vertices.resize(verticesAmount);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>heightOffset<sp/>=<sp/>glm::vec3(0,height,0);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>widthOffset<sp/>=<sp/>glm::vec3(width,0,0);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>_points[0]<sp/>=<sp/><ref refid="classPoint" kindref="compound">Point</ref>(origin);<sp/></highlight><highlight class="comment">//bottom<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>_points[1]<sp/>=<sp/><ref refid="classPoint" kindref="compound">Point</ref>(origin<sp/>+<sp/>widthOffset);<sp/></highlight><highlight class="comment">//bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>_points[2]<sp/>=<sp/><ref refid="classPoint" kindref="compound">Point</ref>(origin<sp/>+<sp/>heightOffset);<sp/></highlight><highlight class="comment">//top<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>_points[3]<sp/>=<sp/><ref refid="classPoint" kindref="compound">Point</ref>(origin<sp/>+<sp/>widthOffset<sp/>+<sp/>heightOffset);<sp/></highlight><highlight class="comment">//top<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="classEmptyRectangle_1af1386bf5f9e1853911e40e8a30aedc88" kindref="member">EmptyRectangle::generateVertices</ref>(){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>verts&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>YOffset<sp/>=<sp/>glm::vec3(0,_height,0);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>XOffset<sp/>=<sp/>glm::vec3(_width,0,0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>thicknessOffSetX<sp/>=<sp/>glm::vec3(_thickness,0,0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>thicknessOffSetY<sp/>=<sp/>glm::vec3(0,_thickness,0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>centerPoint<sp/>=<sp/>glm::vec3(_width/2,_height/2,0);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done<sp/>offsets&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>glm::vec3<sp/>origin<sp/>=<sp/>_points[0].<ref refid="classPoint_1a0f5fd4682dd29392e395d5483bad40b1" kindref="member">getVector</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Y<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;thickness&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//2***3***...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//**<sp/><sp/>*<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/>*<sp/>****...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/><sp/>**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//0***1<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*********</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*********</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>pointsA[4]<sp/>=<sp/>{<ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+thicknessOffSetX)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+YOffset)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+YOffset+thicknessOffSetX))<sp/><sp/></highlight><highlight class="comment">//top<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>_sides[0]<sp/>=<sp/><ref refid="classRectangle" kindref="compound">Rectangle</ref>(pointsA);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Y<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//2********************3<sp/><sp/><sp/><sp/>↑</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Thickness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//0********************1<sp/>X<sp/><sp/>↓</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*next*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>pointsA[3].<ref refid="classPoint_1a0f5fd4682dd29392e395d5483bad40b1" kindref="member">getVector</ref>()-thicknessOffSetY;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>pointsB[4]<sp/>=<sp/>{<ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin)),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+XOffset)),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+thicknessOffSetY)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+XOffset+thicknessOffSetY))<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>_sides[1]<sp/>=<sp/><ref refid="classRectangle" kindref="compound">Rectangle</ref>(pointsB);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//********</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//***2***3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>**<sp/><sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//****<sp/>*<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/><sp/>**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//***0***1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>pointsB[1].<ref refid="classPoint_1a0f5fd4682dd29392e395d5483bad40b1" kindref="member">getVector</ref>()-thicknessOffSetX-YOffset;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>pointsC[4]<sp/>=<sp/>{<ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+thicknessOffSetX)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+YOffset)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+YOffset+thicknessOffSetX+XOffset))<sp/><sp/></highlight><highlight class="comment">//top<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>_sides[2]<sp/>=<sp/><ref refid="classRectangle" kindref="compound">Rectangle</ref>(pointsC);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/>N<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>P<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//2****************3<sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>↑</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Thickness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//0****************1****<sp/>X<sp/><sp/>↓</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>origin<sp/>=<sp/>pointsC[0].<ref refid="classPoint_1a0f5fd4682dd29392e395d5483bad40b1" kindref="member">getVector</ref>()-thicknessOffSetX;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref><sp/>pointsD[4]<sp/>=<sp/>{<ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin)),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+XOffset)),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bottom<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+thicknessOffSetY)),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPoint" kindref="compound">Point</ref>(glm::vec3(origin+XOffset+thicknessOffSetY))<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//top<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>_sides[3]<sp/>=<sp/><ref refid="classRectangle" kindref="compound">Rectangle</ref>(pointsD);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;done<sp/>verts&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>sideVertices;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/><sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++){</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sideVertices<sp/>=<sp/>_sides[i].<ref refid="classRectangle_1a04bc59d135e90047dbb780fb52788e02" kindref="member">generateVertices</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>sideVertices.size()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>.size()<sp/>&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(sideVertices.begin(),<sp/>sideVertices.end(),<sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>.begin()+(18*i));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classshapeElement_1a5bed7938c8f925300b2ca1c3e071fb4b" kindref="member">vertices</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/KronUIGL/Geometry/Shapes.cpp"/>
  </compounddef>
</doxygen>
