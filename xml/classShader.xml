<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classShader" kind="class" language="C++" prot="public">
    <compoundname>Shader</compoundname>
    <basecompoundref refid="classReflectiveItem" prot="public" virt="non-virtual">ReflectiveItem</basecompoundref>
    <derivedcompoundref refid="classRotationPaintShader" prot="public" virt="non-virtual">RotationPaintShader</derivedcompoundref>
    <includes refid="Shader_8hpp" local="no">Shader.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classShader_1a142a08b6fbdfc982d82ca10ee0b0f38d" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int Shader::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="17" column="18" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classShader_1a9f478f324f99862de127125a24443725" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Shader::Shader</definition>
        <argsstring>(std::string reflectiveName, const char *vertexPath, const char *fragmentPath, const char *geometryPath=nullptr)</argsstring>
        <name>Shader</name>
        <param>
          <type>std::string</type>
          <declname>reflectiveName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>vertexPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fragmentPath</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>geometryPath</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="20" column="5" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="20" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a59f5ac19fb359a2fff451c42783d2d5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Shader::Shader</definition>
        <argsstring>(std::string reflectiveName, std::string vertexCode, std::string fragmentCode)</argsstring>
        <name>Shader</name>
        <param>
          <type>std::string</type>
          <declname>reflectiveName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>vertexCode</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>fragmentCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="104" column="5" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="104" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a870fa9f13d69e558815d6fd351a469dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::use</definition>
        <argsstring>()</argsstring>
        <name>use</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="135" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1ab1a56d6c299bd7eaa18c2e142ef7bd9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setBool</definition>
        <argsstring>(const std::string &amp;name, bool value) const</argsstring>
        <name>setBool</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="141" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1ad362e2b654cd95a3574cd505411e41fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setInt</definition>
        <argsstring>(const std::string &amp;name, int value) const</argsstring>
        <name>setInt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="146" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afe7367621f74c2d26431d8ac15252bf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setFloat</definition>
        <argsstring>(const std::string &amp;name, float value) const</argsstring>
        <name>setFloat</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="151" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afd4d41322a1cdd1d5155bf124d19debf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec2</definition>
        <argsstring>(const std::string &amp;name, const glm::vec2 &amp;value) const</argsstring>
        <name>setVec2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec2 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="156" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1afb91bc9e954bf590857c96ab1331b0ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec2</definition>
        <argsstring>(const std::string &amp;name, float x, float y) const</argsstring>
        <name>setVec2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="160" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1aeb021061c5d451329d92257b07dbfec3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec3</definition>
        <argsstring>(const std::string &amp;name, const glm::vec3 &amp;value) const</argsstring>
        <name>setVec3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec3 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="165" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a90092c25b7dc23964c465b93887300f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec3</definition>
        <argsstring>(const std::string &amp;name, float x, float y, float z) const</argsstring>
        <name>setVec3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="169" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a79cbe674f6bf1a576a48045dcb924de5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec4</definition>
        <argsstring>(const std::string &amp;name, const glm::vec4 &amp;value) const</argsstring>
        <name>setVec4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::vec4 &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="174" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a913e10fe2501b00746ae6901b97a1730" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setVec4</definition>
        <argsstring>(const std::string &amp;name, float x, float y, float z, float w)</argsstring>
        <name>setVec4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <param>
          <type>float</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="178" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a91a6ee79b959cacd618c9e29a5bbd732" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat2</definition>
        <argsstring>(const std::string &amp;name, const glm::mat2 &amp;mat) const</argsstring>
        <name>setMat2</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat2 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="183" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a3e24fcad187493dfebaa12939072e91d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat3</definition>
        <argsstring>(const std::string &amp;name, const glm::mat3 &amp;mat) const</argsstring>
        <name>setMat3</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat3 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="188" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classShader_1a8e711c96f3e1722cbfb88fde9478977c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::setMat4</definition>
        <argsstring>(const std::string &amp;name, const glm::mat4 &amp;mat) const</argsstring>
        <name>setMat4</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const glm::mat4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="193" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classShader_1a22055065153d38e63a410cb7e020e905" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Shader::checkCompileErrors</definition>
        <argsstring>(GLuint shader, std::string type)</argsstring>
        <name>checkCompileErrors</name>
        <param>
          <type>GLuint</type>
          <declname>shader</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/KronUIGL/Shaders/Shader.hpp" line="201" column="10" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="201" bodyend="225"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Shader</label>
        <link refid="classShader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>RotationPaintShader</label>
        <link refid="classRotationPaintShader"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ReflectiveItem</label>
        <link refid="classReflectiveItem"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Shader</label>
        <link refid="classShader"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>ReflectiveItem</label>
        <link refid="classReflectiveItem"/>
      </node>
    </collaborationgraph>
    <location file="src/KronUIGL/Shaders/Shader.hpp" line="14" column="1" bodyfile="src/KronUIGL/Shaders/Shader.hpp" bodystart="15" bodyend="226"/>
    <listofallmembers>
      <member refid="classShader_1a22055065153d38e63a410cb7e020e905" prot="private" virt="non-virtual"><scope>Shader</scope><name>checkCompileErrors</name></member>
      <member refid="classReflectiveItem_1ac9c9a3038c9c4e57568418c4f43931f7" prot="public" virt="non-virtual"><scope>Shader</scope><name>getAddress</name></member>
      <member refid="classReflectiveItem_1a1ed203f9b24870e37f02adb3c57c8f5c" prot="public" virt="non-virtual"><scope>Shader</scope><name>getName</name></member>
      <member refid="classShader_1a142a08b6fbdfc982d82ca10ee0b0f38d" prot="public" virt="non-virtual"><scope>Shader</scope><name>ID</name></member>
      <member refid="classReflectiveItem_1adabfa391ef38161de2e243bd387b8e6a" prot="public" virt="non-virtual"><scope>Shader</scope><name>ReflectiveItem</name></member>
      <member refid="classShader_1ab1a56d6c299bd7eaa18c2e142ef7bd9f" prot="public" virt="non-virtual"><scope>Shader</scope><name>setBool</name></member>
      <member refid="classShader_1afe7367621f74c2d26431d8ac15252bf3" prot="public" virt="non-virtual"><scope>Shader</scope><name>setFloat</name></member>
      <member refid="classShader_1ad362e2b654cd95a3574cd505411e41fd" prot="public" virt="non-virtual"><scope>Shader</scope><name>setInt</name></member>
      <member refid="classShader_1a91a6ee79b959cacd618c9e29a5bbd732" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat2</name></member>
      <member refid="classShader_1a3e24fcad187493dfebaa12939072e91d" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat3</name></member>
      <member refid="classShader_1a8e711c96f3e1722cbfb88fde9478977c" prot="public" virt="non-virtual"><scope>Shader</scope><name>setMat4</name></member>
      <member refid="classShader_1afd4d41322a1cdd1d5155bf124d19debf" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec2</name></member>
      <member refid="classShader_1afb91bc9e954bf590857c96ab1331b0ec" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec2</name></member>
      <member refid="classShader_1aeb021061c5d451329d92257b07dbfec3" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec3</name></member>
      <member refid="classShader_1a90092c25b7dc23964c465b93887300f9" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec3</name></member>
      <member refid="classShader_1a79cbe674f6bf1a576a48045dcb924de5" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec4</name></member>
      <member refid="classShader_1a913e10fe2501b00746ae6901b97a1730" prot="public" virt="non-virtual"><scope>Shader</scope><name>setVec4</name></member>
      <member refid="classShader_1a9f478f324f99862de127125a24443725" prot="public" virt="non-virtual"><scope>Shader</scope><name>Shader</name></member>
      <member refid="classShader_1a59f5ac19fb359a2fff451c42783d2d5d" prot="public" virt="non-virtual"><scope>Shader</scope><name>Shader</name></member>
      <member refid="classShader_1a870fa9f13d69e558815d6fd351a469dc" prot="public" virt="non-virtual"><scope>Shader</scope><name>use</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
